unit uSistemaControl;

interface

uses
  uConexao, System.SysUtils, uEmpresaModel;

type
  TSistemaControl = class
  private
    FConexao      : TConexao;
    FEmpresa      : TEmpresaModel;
    FCodigoEmpreda: Integer;

    class var FInstance: TSistemaControl;

  public
    constructor Create();
    destructor Destroy; override;

    procedure SetEmpresa(ACodigoEmpresa: Integer);
    procedure CarregarEmpresa;

    class function GetInstance: TSistemaControl;

     property Conexao: TConexao read FConexao write FConexao;
    property Empresa: TEmpresaModel read FEmpresa write FEmpresa;
  end;

implementation

{ TSistemaControl }

procedure TSistemaControl.CarregarEmpresa;
begin
  FEmpresa.Carregar(FCodigoEmpreda);
end;

constructor TSistemaControl.Create();
begin
  FConexao := TConexao.Create;
  FEmpresa := TEmpresaModel.Create();
end;

destructor TSistemaControl.Destroy;
begin
  FreeAndNil(FEmpresa);
  FreeAndNil(FConexao);

  inherited;
end;

class function TSistemaControl.GetInstance: TSistemaControl;
begin
  if not Assigned(Self.FInstance) then
  begin
    Self.FInstance := TSistemaControl.Create();
  end;

  Result := Self.FInstance;
end;

procedure TSistemaControl.SetEmpresa(ACodigoEmpresa: Integer);
begin
  FCodigoEmpreda := ACodigoEmpresa;
end;

end.
